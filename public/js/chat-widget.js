/**
 * Chat Widget - Fixed Version
 */

class ChatWidget {
    constructor() {
        this.isOpen = false;
        this.isTyping = false;
        this.sessionId = 'chat_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        this.chatHistory = this.loadChatHistory();
        this.currentTrip = null;

        if (window.chatWidget) {
            return window.chatWidget;
        }

        this.init();
        window.chatWidget = this;
    }

init() {
    console.log('üöÄ Chat Widget kh·ªüi t·∫°o...');
    this.createWidget();
    this.bindEvents();
}

bindEvents() {
    // T√¨m gi√° v√©
    const priceMatch = message.match(/(?:gi√°[^:]*:\s*|gi√°\s+r·ªï:\s*)?(\d{2,3})k?(?:\/v√©|\/ng∆∞·ªùi|k)?/gi);

    // T√¨m gi·ªù kh·ªüi h√†nh
    const timeMatch = message.match(/(?:l√∫c\s+|ch·∫°y\s+l√∫c\s+)?(\d{1,2})\s*(?:h|gi·ªù)\s*(?:s√°ng|chi·ªÅu|t·ªëi|tr∆∞a)?/i);

    console.log("Price:", priceMatch);
    console.log("Time:", timeMatch);
}

createWidget() {
    this.addStyles();
}

createWidget() {

        const widget = document.createElement('div');
        widget.className = 'chat-widget';
        widget.innerHTML = this.getWidgetHTML();

        document.body.appendChild(widget);

        this.chatButton = document.querySelector('.chat-button');
        this.chatBox = document.querySelector('.chat-box');
        this.chatClose = document.querySelector('.chat-close');
        this.chatMessages = document.querySelector('.chat-messages');
        this.chatInput = document.querySelector('.chat-input');
        this.chatSend = document.querySelector('.chat-send');

        console.log('‚úÖ Widget HTML created');

        // Load chat history sau khi t·∫°o widget
        this.loadChatMessages();
    }

    addStyles() {
        if (document.getElementById('chat-styles')) return;

        const style = document.createElement('style');
        style.id = 'chat-styles';
        style.textContent = `
            .chat-widget {
                position: fixed;
                bottom: 20px;
                right: 20px;
                z-index: 999999;
                font-family: -apple-system, BlinkMacSystemFont, 'Segui UI', Roboto, sans-serif;
            }
            .chat-button {
                width: 60px;
                height: 60px;
                border-radius: 50%;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                border: none;
                box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.3s ease;
                color: white;
                font-size: 28px;
            }
            .chat-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 25px rgba(102, 126, 234, 0.6);
            }
            .chat-box {
                position: absolute;
                bottom: 80px;
                right: 0;
                width: 380px;
                height: 500px;
                background: white;
                border-radius: 15px;
                box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
                display: none;
                flex-direction: column;
                overflow: hidden;
                opacity: 0;
                transform: scale(0.8) translateY(20px);
                transition: all 0.3s ease;
            }
            .chat-box.active {
                display: flex;
                opacity: 1;
                transform: scale(1) translateY(0);
            }
            .chat-header {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 20px;
                text-align: center;
                position: relative;
            }
            .chat-close {
                position: absolute;
                top: 15px;
                right: 15px;
                background: none;
                border: none;
                color: white;
                font-size: 24px;
                cursor: pointer;
                width: 30px;
                height: 30px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: background 0.2s ease;
            }
            .chat-close:hover {
                background: rgba(255, 255, 255, 0.1);
            }
            .chat-header h3 {
                margin: 0;
                font-size: 18px;
                font-weight: 600;
            }
            .chat-header p {
                margin: 5px 0 0 0;
                font-size: 14px;
                opacity: 0.9;
            }
            .chat-messages {
                flex: 1;
                padding: 20px;
                overflow-y: auto;
                background: #f8f9fa;
                display: flex;
                flex-direction: column;
                gap: 15px;
            }
            .message {
                max-width: 85%;
                word-wrap: break-word;
                line-height: 1.5;
                font-size: 14px;
                margin-bottom: 10px;
            }
            .message.user {
                align-self: flex-end;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 12px 16px;
                border-radius: 20px 20px 5px 20px;
                margin-left: auto;
            }
            .message.bot {
                align-self: flex-start;
                background: white;
                color: #333;
                padding: 12px 16px;
                border-radius: 20px 20px 20px 5px;
                border: 1px solid #e9ecef;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
                margin-right: auto;
                white-space: pre-wrap;
            }
            .typing {
                display: flex;
                gap: 4px;
                align-items: center;
                padding: 8px 0;
            }
            .typing span {
                width: 8px;
                height: 8px;
                border-radius: 50%;
                background-color: #999;
                animation: typing 1.4s infinite ease-in-out;
            }
            .typing span:nth-child(2) { animation-delay: -0.32s; }
            .typing span:nth-child(3) { animation-delay: -0.16s; }
            @keyframes typing {
                0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }
                40% { transform: scale(1); opacity: 1; }
            }
            .chat-input-area {
                padding: 20px;
                background: white;
                border-top: 1px solid #e9ecef;
                display: flex;
                gap: 10px;
                align-items: flex-end;
            }
            .chat-input {
                flex: 1;
                resize: none;
                border: 2px solid #e9ecef;
                border-radius: 20px;
                padding: 12px 16px;
                font-size: 14px;
                outline: none;
                max-height: 80px;
                min-height: 20px;
                background: white;
                color: #333;
                font-family: inherit;
                line-height: 1.4;
                transition: border-color 0.2s ease;
            }
            .chat-input:focus {
                border-color: #667eea;
            }
            .chat-send {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                width: 45px;
                height: 45px;
                border-radius: 50%;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                outline: none;
                flex-shrink: 0;
                transition: transform 0.2s ease;
            }
            .chat-send:hover {
                transform: scale(1.05);
            }
            .chat-send:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }
            .welcome {
                text-align: center;
                color: #666;
                font-size: 14px;
                padding: 15px;
                background: #f8f9fa;
                border-radius: 10px;
                border: 1px dashed #dee2e6;
                line-height: 1.5;
            }
            .booking-button {
                background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 25px;
                font-size: 14px;
                font-weight: 600;
                cursor: pointer;
                margin: 10px 5px;
                transition: all 0.3s ease;
                box-shadow: 0 2px 10px rgba(40, 167, 69, 0.3);
            }
            .booking-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 15px rgba(40, 167, 69, 0.4);
            }
            .trip-info {
                background: #e3f2fd;
                padding: 15px;
                border-radius: 10px;
                border-left: 4px solid #2196f3;
                margin: 10px 0;
                font-size: 14px;
            }
            .trip-info strong {
                color: #1976d2;
            }
            .booking-button {
                background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 25px;
                font-size: 14px;
                font-weight: 600;
                cursor: pointer;
                margin: 10px 5px;
                transition: all 0.3s ease;
                box-shadow: 0 2px 10px rgba(40, 167, 69, 0.3);
            }
            .booking-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 15px rgba(40, 167, 69, 0.4);
            }
            .trip-info {
                background: #e3f2fd;
                padding: 15px;
                border-radius: 10px;
                border-left: 4px solid #2196f3;
                margin: 10px 0;
                font-size: 14px;
            }
            .trip-info strong {
                color: #1976d2;
            }
            .clear-chat {
                position: absolute;
                top: 15px;
                left: 15px;
                background: none;
                border: none;
                color: white;
                font-size: 16px;
                cursor: pointer;
                width: 30px;
                height: 30px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: background 0.2s ease;
            }
            .clear-chat:hover {
                background: rgba(255, 255, 255, 0.1);
            }
        `;
        document.head.appendChild(style);
    }

    getWidgetHTML() {
        return `
            <button class="chat-button" title="Chat v·ªõi Minh - T∆∞ v·∫•n vi√™n FUTA">
                üí¨
            </button>
            <div class="chat-box">
                <div class="chat-header">
                    <button class="clear-chat" onclick="window.chatWidget.clearAllChat()" title="X√≥a to√†n b·ªô chat">üóëÔ∏è</button>
                    <button class="chat-close">√ó</button>
                    <h3>ü§ñ Minh - T∆∞ v·∫•n vi√™n AI</h3>
                    <p>H·ªó tr·ª£ ƒë·∫∑t v√© xe 24/7</p>
                </div>
                <div class="chat-messages">
                    <div class="welcome">
                        üëã Ch√†o b·∫°n! M√¨nh l√† <strong>Minh</strong> - t∆∞ v·∫•n vi√™n t·∫°i ƒë√¢y<br><br>
                        M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n:<br>
                        üí¨ T∆∞ v·∫•n chuy·∫øn xe ph√π h·ª£p<br>
                        üé´ H∆∞·ªõng d·∫´n ƒë·∫∑t v√© online<br>
                        üí∞ T∆∞ v·∫•n gi√° v√© v√† khuy·∫øn m√£i<br>
                        ‚ùì Gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc kh√°c<br><br>
                        <strong style="color: #667eea;">Th·ª≠ h·ªèi m√¨nh:</strong><br>
                        "M√¨nh mu·ªën ƒëi t·ª´ TP.HCM ƒë·∫øn ƒê√† L·∫°t"<br>
                        "Gi√° v√© t·ª´ H√† N·ªôi v·ªÅ Vinh bao nhi√™u?"<br><br>
                        C·ª© tho·∫£i m√°i h·ªèi nh√©! üòä
                    </div>
                </div>
                <div class="chat-input-area">
                    <textarea class="chat-input" placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..." rows="1"></textarea>
                    <button class="chat-send" title="G·ª≠i tin nh·∫Øn">‚û§</button>
                </div>
            </div>
        `;
    }

    bindEvents() {
        this.chatButton.addEventListener('click', () => this.toggleChat());
        this.chatClose.addEventListener('click', () => this.closeChat());
        this.chatSend.addEventListener('click', () => this.sendMessage());

        this.chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });

        this.chatInput.addEventListener('input', () => {
            this.chatInput.style.height = 'auto';
            this.chatInput.style.height = this.chatInput.scrollHeight + 'px';
        });

        document.addEventListener('click', (e) => {
            if (!e.target.closest('.chat-widget') && this.isOpen) {
                this.closeChat();
            }
        });

        console.log('‚úÖ Events bound successfully');
    }

    toggleChat() {
        if (this.isOpen) {
            this.closeChat();
        } else {
            this.openChat();
        }
    }

    openChat() {
        console.log('üìñ Opening chat');
        this.isOpen = true;
        this.chatBox.classList.add('active');
        this.chatButton.style.transform = 'rotate(180deg)';

        setTimeout(() => {
            this.chatInput.focus();
            this.scrollToBottom();
        }, 300);
    }

    closeChat() {
        console.log('üìï Closing chat');
        this.isOpen = false;
        this.chatBox.classList.remove('active');
        this.chatButton.style.transform = 'rotate(0deg)';
    }

    async sendMessage() {
        const message = this.chatInput.value.trim();
        if (!message || this.isTyping) return;

        console.log('üì§ Sending message:', message);

        this.addMessage(message, 'user');
        this.chatInput.value = '';
        this.chatInput.style.height = 'auto';
        this.showTyping();

        // Ph√°t hi·ªán ƒëi·ªÉm ƒëi v√† ƒëi·ªÉm ƒë·∫øn
        this.detectTripInfo(message);

        try {
            const response = await fetch('/BC_TMDT/api/chat.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: message,
                    session_id: this.sessionId
                })
            });

            if (!response.ok) {
                throw new Error('HTTP ' + response.status);
            }

            const data = await response.json();
            console.log('üì® API response:', data);

            this.hideTyping();

            if (data.error) {
                this.addMessage('√îi, c√≥ l·ªói g√¨ ƒë√≥ r·ªìi üòÖ B·∫°n th·ª≠ l·∫°i sau nh√©!', 'bot');
            } else {
                const botMessage = data.content || 'Xin l·ªói, m√¨nh kh√¥ng hi·ªÉu l·∫Øm. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n ƒë∆∞·ª£c kh√¥ng? ü§î';
                this.addMessage(botMessage, 'bot');

                // Ki·ªÉm tra n·∫øu c√≥ danh s√°ch chuy·∫øn xe t·ª´ API
                if (data.type === 'trip_list' && data.trips && data.trips.length > 0) {
                    this.showTripButtons(data.trips);
                } else {
                    // Ki·ªÉm tra n·∫øu bot message ch·ª©a th√¥ng tin chuy·∫øn xe c·ª• th·ªÉ
                    this.checkAndShowBookingButtonFromMessage(botMessage);
                }
            }

        } catch (error) {
            console.error('‚ùå Chat API Error:', error);
            this.hideTyping();
            this.addMessage('√îi, m·∫°ng h√¨nh nh∆∞ b·ªã ch·∫≠m. B·∫°n th·ª≠ l·∫°i sau v√†i gi√¢y nh√©! üì∂', 'bot');
        }
    }

    addMessage(content, sender, isBookingButton = false) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message ' + sender;

        if (isBookingButton) {
            messageDiv.innerHTML = content;
        } else {
            messageDiv.textContent = content;
        }

        this.chatMessages.appendChild(messageDiv);
        this.scrollToBottom();

        // L∆∞u v√†o chat history (ch·ªâ l∆∞u text message, kh√¥ng l∆∞u booking button)
        if (!isBookingButton) {
            this.saveChatMessage(content, sender);
        }
    }

    showTyping() {
        if (this.isTyping) return;

        this.isTyping = true;
        this.chatSend.disabled = true;

        const typingDiv = document.createElement('div');
        typingDiv.className = 'message bot';
        typingDiv.id = 'typing-indicator';
        typingDiv.innerHTML = 'Minh ƒëang suy nghƒ© <span style="animation: typing 1.4s infinite;">...</span>';

        this.chatMessages.appendChild(typingDiv);
        this.scrollToBottom();
    }

    hideTyping() {
        this.isTyping = false;
        this.chatSend.disabled = false;

        const typingDiv = document.getElementById('typing-indicator');
        if (typingDiv) {
            typingDiv.remove();
        }
    }

    scrollToBottom() {
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    // L∆∞u chat message v√†o localStorage
    saveChatMessage(content, sender) {
        this.chatHistory.push({ content, sender, timestamp: Date.now() });
        localStorage.setItem('chatHistory', JSON.stringify(this.chatHistory));
    }

    // Load chat history t·ª´ localStorage
    loadChatHistory() {
        const saved = localStorage.getItem('chatHistory');
        return saved ? JSON.parse(saved) : [];
    }

    // Load chat messages t·ª´ history
    loadChatMessages() {
        if (this.chatHistory.length === 0) {
            // Hi·ªÉn th·ªã welcome message n·∫øu ch∆∞a c√≥ chat
            return;
        }

        // X√≥a welcome message
        const welcome = this.chatMessages.querySelector('.welcome');
        if (welcome) welcome.remove();

        // Load c√°c message t·ª´ history
        this.chatHistory.forEach(msg => {
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message ' + msg.sender;
            messageDiv.textContent = msg.content;
            this.chatMessages.appendChild(messageDiv);
        });

        this.scrollToBottom();
    }

    // Ph√°t hi·ªán th√¥ng tin chuy·∫øn xe t·ª´ tin nh·∫Øn
    detectTripInfo(message) {
        const cities = ['h√† n·ªôi', 'h·ªì ch√≠ minh', 'tp hcm', 's√†i g√≤n', 'ƒë√† n·∫µng', 'c·∫ßn th∆°', 'h·∫£i ph√≤ng', 'ƒë√† l·∫°t', 'nha trang', 'hu·∫ø', 'qu·∫£ng ninh', 'v≈©ng t√†u', 'phan thi·∫øt', 'quy nhon', 'pleiku', 'bu√¥n ma thu·ªôt', 'c√† mau', 'an giang', 'ki√™n giang', 'ti·ªÅn giang', 'long an', 'ƒë·ªìng nai', 'b√¨nh d∆∞∆°ng', 't√¢y ninh', 'b√¨nh ph∆∞·ªõc', 'l√¢m ƒë·ªìng', 'ninh thu·∫≠n', 'b√¨nh thu·∫≠n', 'kh√°nh h√≤a', 'ph√∫ y√™n', 'gia lai', 'ƒë·∫Øk l·∫Øk', 'ƒë·∫Øk n√¥ng', 'kon tum', 'qu·∫£ng nam', 'qu·∫£ng ng√£i', 'b√¨nh ƒë·ªãnh', 'th·ª´a thi√™n hu·∫ø', 'qu·∫£ng b√¨nh', 'qu·∫£ng tr·ªã', 'h√† tƒ©nh', 'ngh·ªá an', 'thanh h√≥a', 'ninh b√¨nh', 'nam ƒë·ªãnh', 'th√°i b√¨nh', 'h∆∞ng y√™n', 'h√† nam', 'vƒ©nh ph√∫c', 'b·∫Øc ninh', 'b·∫Øc giang', 'l·∫°ng s∆°n', 'cao b·∫±ng', 'h√† giang', 'l√†o cai', 'y√™n b√°i', 's∆°n la', 'ƒëi·ªán bi√™n', 'lai ch√¢u', 'h√≤a b√¨nh', 'ph√∫ th·ªç', 'tuy√™n quang', 'th√°i nguy√™n', 'b·∫Øc k·∫°n', 'vinh', 'hu·∫ø', 'ƒë√¥ng h√†'];

        let detectedCities = [];
        const lowerMessage = message.toLowerCase();

        cities.forEach(city => {
            if (lowerMessage.includes(city)) {
                detectedCities.push(city);
            }
        });

        if (detectedCities.length >= 2) {
            this.currentTrip = {
                from: detectedCities[0],
                to: detectedCities[1]
            };
        }
    }

    // Ki·ªÉm tra v√† hi·ªÉn th·ªã n√∫t ƒë·∫∑t v√© t·ª´ message
    checkAndShowBookingButtonFromMessage(botMessage) {
        console.log('üé´ Checking for booking button from message:', botMessage);

        // Ph√¢n t√≠ch th√¥ng tin chuy·∫øn xe t·ª´ bot message
        const tripInfo = this.extractTripInfoFromMessage(botMessage);

        if (tripInfo) {
            console.log('üéØ Will show specific trip booking button in 1s');
            setTimeout(() => {
                this.showSpecificTripBookingButton(tripInfo);
            }, 1000);
        } else {
            console.log('üîÑ Falling back to old method');
            // Fallback v·ªÅ method c≈©
            this.checkAndShowBookingButton(botMessage);
        }
    }

        // Tr√≠ch xu·∫•t th√¥ng tin chuy·∫øn xe t·ª´ message
        extractTripInfoFromMessage(message) {
            console.log('üîç Extracting trip info from:', message);
            const info = {};
            
            // T√¨m gi√° v√© (Gi√° v√©: 370k/v√©, 370k/ng∆∞·ªùi, Gi√° r·ªï: 370k)
            const priceMatch = message.match(/(?:gi√°[^:]*:\s*|gi√°\s+r·ªï:\s*)?(\d{2,3})k?(?:\/v√©|\/ng∆∞·ªùi|k)?/gi);
            if (priceMatch) {
                // Extract s·ªë t·ª´ match string
                const priceStr = priceMatch[0];
                const priceNumber = priceStr.match(/(\d{2,3})/)[1];
                let price = priceNumber;
                if (price.length <= 3) {
                    price = price + '000';
                }
                info.gia_ve = parseInt(price);
                console.log('üí∞ Found price:', info.gia_ve, 'from:', priceStr);
            }
            
            // T√¨m gi·ªù kh·ªüi h√†nh (l√∫c 7 gi·ªù s√°ng, 7h s√°ng, ch·∫°y l√∫c 7 gi·ªù s√°ng)
            const timeMatch = message.match(/(?:l√∫c\s+|ch·∫°y\s+l√∫c\s+)?(\d{1,2})\s*(?:h|gi·ªù)\s*(?:s√°ng|chi·ªÅu|t·ªëi|tr∆∞a)?/i);
            if (timeMatch) {
                const hour = timeMatch[1];
                info.gio_di = hour.padStart(2, '0') + ':00';
                console.log('üïê Found time:', info.gio_di, 'from:', timeMatch[0]);
            }
            
            // T√¨m ng√†y (26/09/2025, ng√†y mai, h√¥m nay)
            const dateMatch = message.match(/(\d{1,2})\/(\d{1,2})\/(\d{4})/);
            if (dateMatch) {
                const day = dateMatch[1].padStart(2, '0');
                const month = dateMatch[2].padStart(2, '0');
                const year = dateMatch[3];
                info.ngay_di = year + '-' + month + '-' + day;
                console.log('üìÖ Found date:', info.ngay_di);
            }
            
            // T√¨m lo·∫°i xe
            if (message.includes('gi∆∞·ªùng n·∫±m')) {
                info.loai_xe = 'Gi∆∞·ªùng n·∫±m';
                console.log('üöå Found bus type:', info.loai_xe);
            } else if (message.includes('limousine')) {
                info.loai_xe = 'Limousine';
                console.log('üöå Found bus type:', info.loai_xe);
            } else if (message.includes('gh·∫ø ng·ªìi')) {
                info.loai_xe = 'Gh·∫ø ng·ªìi';
                console.log('üöå Found bus type:', info.loai_xe);
            }
            
            // T√¨m s·ªë ch·ªó c√≤n l·∫°i (C√≤n 10 gh·∫ø th√¥i, c√≤n kho·∫£ng 10 gh·∫ø)
            const seatMatch = message.match(/c√≤n\s+(?:kho·∫£ng\s+)?(\d+)\s+gh·∫ø(?:\s+th√¥i)?/i);
            if (seatMatch) {
                info.so_ve = parseInt(seatMatch[1]);
                console.log('ü™ë Found seats:', info.so_ve);
            }
            
            // T√¨m t√™n nh√† xe (nh√† xe T√¢y ƒê√¥)
            const companyMatch = message.match(/nh√† xe\s+([A-Z√Ä-·ª∏][a-zA-Z√Ä-·ªπ\s]*ƒê√¥)/i);
            if (companyMatch) {
                info.nha_xe = companyMatch[1].trim();
                console.log('üè¢ Found company:', info.nha_xe);
            }
            
            console.log('üìä Extracted info:', info);
            
            // N·∫øu c√≥ √≠t nh·∫•t gi√° ho·∫∑c gi·ªù th√¨ coi nh∆∞ c√≥ th√¥ng tin
            if (info.gia_ve || info.gio_di) {
                // Th√™m th√¥ng tin ƒëi·ªÉm ƒëi/ƒë·∫øn t·ª´ context n·∫øu c√≥
                if (this.currentTrip) {
                    info.diem_di = this.formatCityName(this.currentTrip.from);
                    info.diem_den = this.formatCityName(this.currentTrip.to);
                }
                
                console.log('‚úÖ Trip info found:', info);
                return info;
            }
            
            console.log('‚ùå No trip info found in message');
            return null;
        }

    // Hi·ªÉn th·ªã n√∫t ƒë·∫∑t v√© v·ªõi th√¥ng tin chuy·∫øn c·ª• th·ªÉ
    showSpecificTripBookingButton(tripInfo) {
        const now = new Date();
        const defaultDate = now.toISOString().split('T')[0];

        const bookingHTML = `
                <div class="trip-info">
                    <strong>üé´ Th√¥ng tin chuy·∫øn xe t√¨m th·∫•y:</strong><br>
                    ${tripInfo.diem_di ? `üìç T·ª´: ${tripInfo.diem_di}<br>` : ''}
                    ${tripInfo.diem_den ? `üìç ƒê·∫øn: ${tripInfo.diem_den}<br>` : ''}
                    ${tripInfo.ngay_di ? `üìÖ Ng√†y: ${tripInfo.ngay_di}<br>` : ''}
                    ${tripInfo.gio_di ? `üïê Gi·ªù: ${tripInfo.gio_di}<br>` : ''}
                    ${tripInfo.loai_xe ? `üöå Lo·∫°i xe: ${tripInfo.loai_xe}<br>` : ''}
                    ${tripInfo.gia_ve ? `üí∞ Gi√° v√©: ${this.formatPrice(tripInfo.gia_ve)} VND<br>` : ''}
                    ${tripInfo.so_ve ? `ü™ë C√≤n: ${tripInfo.so_ve} gh·∫ø<br>` : ''}
                    ${tripInfo.nha_xe ? `üè¢ Nh√† xe: ${tripInfo.nha_xe}<br>` : ''}
                    <br>
                    <button class="booking-button" onclick="window.chatWidget.bookSpecificTrip(${JSON.stringify(tripInfo).replace(/"/g, '&quot;')})">
                        üé´ ƒê·∫∑t v√© chuy·∫øn n√†y ngay
                    </button>
                </div>
            `;

        this.addMessage(bookingHTML, 'bot', true);
    }

    // ƒê·∫∑t v√© v·ªõi th√¥ng tin c·ª• th·ªÉ
    bookSpecificTrip(tripInfo) {
        const params = new URLSearchParams();

        if (tripInfo.diem_di) params.set('diem_di', tripInfo.diem_di);
        if (tripInfo.diem_den) params.set('diem_den', tripInfo.diem_den);
        if (tripInfo.ngay_di) params.set('ngay_di', tripInfo.ngay_di);
        if (tripInfo.gio_di) params.set('gio_di', tripInfo.gio_di);
        if (tripInfo.gia_ve) params.set('gia_ve', tripInfo.gia_ve);
        if (tripInfo.loai_xe) params.set('loai_xe', tripInfo.loai_xe);
        if (tripInfo.nha_xe) params.set('nha_xe', tripInfo.nha_xe);
        if (tripInfo.so_ve) params.set('so_ve', tripInfo.so_ve);

        window.location.href = `/BC_TMDT/DatVe.php?${params.toString()}`;
    }

    // Ki·ªÉm tra v√† hi·ªÉn th·ªã n√∫t ƒë·∫∑t v√© (method c≈©)
    checkAndShowBookingButton(botMessage) {
        if (this.currentTrip && (botMessage.includes('chuy·∫øn') || botMessage.includes('tuy·∫øn') || botMessage.includes('xe'))) {
            setTimeout(() => {
                this.showBookingButton();
            }, 1000);
        }
    }

    // Hi·ªÉn th·ªã n√∫t ƒë·∫∑t v√©
    showBookingButton() {
        if (!this.currentTrip) return;

        const bookingHTML = `
                <div class="trip-info">
                    <strong>üöå Th√¥ng tin chuy·∫øn xe:</strong><br>
                    üìç T·ª´: ${this.formatCityName(this.currentTrip.from)}<br>
                    üìç ƒê·∫øn: ${this.formatCityName(this.currentTrip.to)}<br>
                    <button class="booking-button" onclick="window.chatWidget.goToBooking()">
                        üé´ ƒê·∫∑t v√© ngay
                    </button>
                </div>
            `;

        this.addMessage(bookingHTML, 'bot', true);
    }

    // Hi·ªÉn th·ªã danh s√°ch chuy·∫øn xe t·ª´ database
    showTripButtons(trips) {
        let tripHTML = '<div class="trip-info"><strong>üé´ C√°c chuy·∫øn xe t√¨m th·∫•y:</strong><br><br>';

        trips.forEach((trip, index) => {
            const tripId = trip.trip_id;
            const tripInfo = trip.trip_info;

            tripHTML += `
                    <div style="margin-bottom: 15px; padding: 10px; border: 1px solid #ddd; border-radius: 8px; background: #f9f9f9;">
                        <strong>Chuy·∫øn ${index + 1}: ${tripInfo.ten_xe}</strong><br>
                        üìç ${tripInfo.diem_di} ‚Üí ${tripInfo.diem_den}<br>
                        üïí ${tripInfo.ngay_di} - ${tripInfo.gio_di}<br>
                        üí∞ ${this.formatPrice(tripInfo.gia_ve)} VND<br>
                        <button class="booking-button" onclick="window.chatWidget.bookTrip(${tripId}, '${tripInfo.ten_xe}', '${tripInfo.diem_di}', '${tripInfo.diem_den}', '${tripInfo.ngay_di}', '${tripInfo.gio_di}', ${tripInfo.gia_ve})" 
                                style="margin-top: 8px; font-size: 12px; padding: 8px 15px;">
                            üé´ ƒê·∫∑t v√© chuy·∫øn n√†y
                        </button>
                    </div>
                `;
        });

        tripHTML += '</div>';
        this.addMessage(tripHTML, 'bot', true);
    }

    // Format t√™n th√†nh ph·ªë
    formatCityName(city) {
        return city.replace(/\b\w/g, l => l.toUpperCase());
    }

    // Format gi√° ti·ªÅn
    formatPrice(price) {
        return new Intl.NumberFormat('vi-VN').format(price);
    }

    // Chuy·ªÉn ƒë·∫øn trang ƒë·∫∑t v√© cho chuy·∫øn c·ª• th·ªÉ
    bookTrip(tripId, tenXe, diemDi, diemDen, ngayDi, gioDi, giaVe) {
        const params = new URLSearchParams({
            trip_id: tripId,
            ten_xe: tenXe,
            diem_di: diemDi,
            diem_den: diemDen,
            ngay_di: ngayDi,
            gio_di: gioDi,
            gia_ve: giaVe
        });

        window.location.href = `/BC_TMDT/DatVe.php?${params.toString()}`;
    }

    // Chuy·ªÉn ƒë·∫øn trang ƒë·∫∑t v√©
    goToBooking() {
        if (this.currentTrip) {
            const from = encodeURIComponent(this.currentTrip.from);
            const to = encodeURIComponent(this.currentTrip.to);
            window.location.href = `/BC_TMDT/DatVe.php?from=${from}&to=${to}`;
        }
    }

    // X√≥a chat history (ch·ªâ khi F5)
    clearChatHistory() {
        this.chatHistory = [];
        localStorage.removeItem('chatHistory');
    }

    // X√≥a t·∫•t c·∫£ chat v√† reload welcome message
    clearAllChat() {
        if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠ chat?')) {
            this.chatHistory = [];
            localStorage.removeItem('chatHistory');
            this.currentTrip = null;

            // X√≥a t·∫•t c·∫£ messages
            this.chatMessages.innerHTML = '';

            // Th√™m l·∫°i welcome message
            const welcomeDiv = document.createElement('div');
            welcomeDiv.className = 'welcome';
            welcomeDiv.innerHTML = `
                    üëã Ch√†o b·∫°n! M√¨nh l√† <strong>Minh</strong> - t∆∞ v·∫•n vi√™n t·∫°i ƒë√¢y<br><br>
                    M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n:<br>
                    üí¨ T∆∞ v·∫•n chuy·∫øn xe ph√π h·ª£p<br>
                    üé´ H∆∞·ªõng d·∫´n ƒë·∫∑t v√© online<br>
                    üí∞ T∆∞ v·∫•n gi√° v√© v√† khuy·∫øn m√£i<br>
                    ‚ùì Gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc kh√°c<br><br>
                    <strong style="color: #667eea;">Th·ª≠ h·ªèi m√¨nh:</strong><br>
                    "M√¨nh mu·ªën ƒëi t·ª´ TP.HCM ƒë·∫øn ƒê√† L·∫°t"<br>
                    "Gi√° v√© t·ª´ H√† N·ªôi v·ªÅ Vinh bao nhi√™u?"<br><br>
                    C·ª© tho·∫£i m√°i h·ªèi nh√©! üòä
                `;
            this.chatMessages.appendChild(welcomeDiv);
        }
    }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    console.log('üåü DOM ready, initializing FUTA Chat Widget...');

    if (document.body.classList.contains('no-chat-widget') ||
        document.body.hasAttribute('data-no-chat-widget')) {
        console.log('‚ö†Ô∏è Chat widget disabled on this page');
        return;
    }

    try {
        window.chatWidget = new ChatWidget();
        console.log('‚úÖ Chat Widget initialized successfully!');

        // X√≥a chat history khi trang ƒë∆∞·ª£c t·∫£i l·∫°i (F5)
        window.addEventListener('beforeunload', () => {
            // Kh√¥ng x√≥a chat history ·ªü ƒë√¢y, ƒë·ªÉ n√≥ t·ªìn t·∫°i
        });
    } catch (error) {
        console.error('‚ùå Failed to initialize Chat Widget:', error);
    }
});

window.ChatWidget = ChatWidget;
console.log('üöÄ Chat Widget script loaded');